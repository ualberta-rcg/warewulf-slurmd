name: Build and Commit Slurm DEB Packages

on:
  workflow_dispatch:    # manual trigger
  schedule:
    - cron: '0 3 1 * *'  # every month on the 1st at 03:00 UTC

jobs:
  build-debs:
    runs-on: ubuntu-24.04

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect Latest Stable Slurm Version
        id: slurm-version
        run: |
          tags=$(curl -s https://api.github.com/repos/SchedMD/slurm/tags | jq -r '.[].name')
          
          latest=$(echo "$tags" \
            | grep -E '^slurm-[0-9]+-[0-9]+-[0-9]+-[0-9]+$' \
            | sort -V \
            | tail -n1)

          version="${latest#slurm-}"
          tarball_url="https://codeload.github.com/SchedMD/slurm/tar.gz/refs/tags/${latest}"

          echo "Detected Slurm version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "tarball_url=$tarball_url" >> $GITHUB_OUTPUT
          
      - name: 🛑 Check if DEBs for this version already exist
        id: version-check
        run: |
          version="${{ steps.slurm-version.outputs.version }}"
          debver="$(echo "$version" | sed 's/^\([0-9]*\)-\([0-9]*\)-\([0-9]*\)-\([0-9]*\)$/\1.\2.\3-\4/')"
          debdir="$GITHUB_WORKSPACE/slurm-debs"

          echo "🔍 Inputs:"
          echo "  Raw version       = $version"
          echo "  Debian version    = $debver"
          echo "  Search directory  = $debdir"
          echo "  Search pattern    = *_${debver}_*_u2404.deb"

          mkdir -p "$debdir"
          echo "📂 Directory contents before search:"
          ls -l "$debdir" || true

          count=$(find "$debdir" -type f -name "*_${debver}_*_u2404.deb" | wc -l || true)

          if [ "$count" -gt 0 ]; then
            echo "✅ DEBs for Slurm $version already exist. Skipping build."
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "🚧 No existing DEBs for Slurm $version. Proceeding with build."
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi


      - name: 🛠 Install Build Dependencies
        if: steps.version-check.outputs.skip_build == 'false'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            devscripts \
            equivs \
            build-essential \
            fakeroot \
            debhelper \
            curl \
            jq \
            git \
            libpmix-dev \
            libpmix2 \
            libopenmpi-dev \
            libopenmpi3 \
            openmpi-bin

      - name: 📥 Download and Extract Slurm Source
        if: steps.version-check.outputs.skip_build == 'false'
        run: |
          echo "${{ steps.slurm-version.outputs.tarball_url }}"
          mkdir -p /tmp/slurm && cd /tmp/slurm
          curl -L "${{ steps.slurm-version.outputs.tarball_url }}" -o slurm.tar.gz
          tar -xzf slurm.tar.gz
          src_dir=$(find . -maxdepth 1 -type d -name "slurm-*")
          mv "$src_dir" slurm-src

      - name: 📦 Build Slurm DEBs
        if: steps.version-check.outputs.skip_build == 'false'
        run: |
          cd /tmp/slurm/slurm-src
          sudo mk-build-deps -ir --tool='apt-get -qq -y --no-install-recommends' debian/control
          debuild -b -uc -us

      - name: 📁 Rename and Move DEBs to Repo
        if: steps.version-check.outputs.skip_build == 'false'
        run: |
          mkdir -p $GITHUB_WORKSPACE/slurm-debs
          for deb in /tmp/slurm/*.deb; do
            base=$(basename "$deb" .deb)
            mv "$deb" "$GITHUB_WORKSPACE/slurm-debs/${base}_u2404.deb"
          done

      - name: 📤 Commit and Push DEBs
        if: steps.version-check.outputs.skip_build == 'false'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add slurm-debs/
          git commit -m "Add Slurm DEBs (v${{ steps.slurm-version.outputs.version }}) for Ubuntu 24.04" || echo "Nothing to commit"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
