name: Build & Push Slurmd Warewulf Image

on:
  push:
    branches:
      - latest
  workflow_dispatch:
    inputs:
      SLURM_VERSION_OVERRIDE:
        description: 'Specific Slurm version (e.g., 24-11-5-1). Use "0" for latest.'
        required: false
        default: '0'
      NVIDIA_INSTALL_ENABLED:
        description: 'Enable NVIDIA driver installation (1=Yes, 0=No).'
        required: true
        type: choice
        options:
          - '1'
          - '0'
        default: '1'
      NVIDIA_DRIVER_VERSION_OVERRIDE:
        description: 'Specific NVIDIA driver version (e.g., 550.90.07). Use "0" for latest.'
        required: false
        default: '0'
      NVIDIA_DRIVER_ARCHITECTURE:
        description: 'NVIDIA driver architecture (x86_64 or aarch64).'
        required: true
        type: choice
        options:
          - 'x86_64'
          - 'aarch64'
        default: 'x86_64'

env:
  TAG_NAME: ${{ github.ref_name }}

jobs:
  build-and-push:
    name: Build & Push SlurmD WareWulf Image
    runs-on: ubuntu-24.04

    steps:
      - name: üõ†Ô∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üîß Configure Build & Verify Dependencies
        id: config
        run: |
          set -e # Exit on any error
          
          # Helper function to lowercase values
          lower() { echo "$1" | tr '[:upper:]' '[:lower:]'; }

          echo "## 1. Normalizing Standard Options ##"
          val="$(lower "${{ vars.DISABLE_AUTOLOGIN }}")"
          [ "$val" = "1" ] || [ "$val" = "true" ] && echo "DISABLE_AUTOLOGIN=true" >> $GITHUB_OUTPUT || echo "DISABLE_AUTOLOGIN=false" >> $GITHUB_OUTPUT

          val="${{ vars.KERNEL_VERSION_OVERRIDE }}"
          [ "$val" != "0" ] && [ -n "$val" ] && echo "KERNEL_VERSION=$val" >> $GITHUB_OUTPUT || echo "KERNEL_VERSION=latest" >> $GITHUB_OUTPUT

          # ---
          echo ""
          echo "## 2. Processing Slurm Configuration & Verifying DEBs ##"
          
          SLURM_VERSION_OVERRIDE="${{ github.event.inputs.SLURM_VERSION_OVERRIDE || vars.SLURM_VERSION_OVERRIDE || '0' }}"

          if [ -n "$SLURM_VERSION_OVERRIDE" ] && [ "$SLURM_VERSION_OVERRIDE" != "0" ]; then
            echo "‚úÖ Using specified Slurm version override: $SLURM_VERSION_OVERRIDE"
            TARGET_SLURM_VERSION="$SLURM_VERSION_OVERRIDE"
          else
            echo "üîç No Slurm version override. Detecting latest stable version from SchedMD..."
            TAGS=$(curl -s https://api.github.com/repos/SchedMD/slurm/tags | jq -r '.[].name')
            LATEST_TAG=$(echo "$TAGS" | grep -E '^slurm-[0-9]+-[0-9]+-[0-9]+-[0-9]+$' | sort -V | tail -n1)

            if [ -z "$LATEST_TAG" ]; then
              echo "‚ùå ERROR: Could not determine the latest Slurm tag."
              exit 1
            fi
            TARGET_SLURM_VERSION="${LATEST_TAG#slurm-}"
            echo "üî¨ Detected latest Slurm version: $TARGET_SLURM_VERSION"
          fi

          echo "üîé Verifying that DEB packages for Slurm version '$TARGET_SLURM_VERSION' exist..."
          debver="$(echo "$TARGET_SLURM_VERSION" | sed 's/^\([0-9]*\)-\([0-9]*\)-\([0-9]*\)-\([0-9]*\)$/\1.\2.\3-\4/')"
          debdir="$GITHUB_WORKSPACE/slurm-debs"
          OS_CODENAME="u2404"
          search_pattern="*_${debver}_*_${OS_CODENAME}.deb"
          
          count=$(find "$debdir" -type f -name "$search_pattern" 2>/dev/null | wc -l)

          if [ "$count" -eq 0 ]; then
            echo "‚ùå ERROR: Slurm DEB packages for version $TARGET_SLURM_VERSION not found!"
            echo "   Searched for pattern '$search_pattern' in '$debdir'."
            echo "   Please build and commit the DEBs for this version first."
            exit 1
          else
            echo "‚úÖ Found $count matching DEB packages for Slurm $TARGET_SLURM_VERSION."
          fi
          
          # ---
          echo ""
          echo "## 3. Processing NVIDIA Configuration ##"
          ENABLED_INPUT="$(lower "${{ github.event.inputs.NVIDIA_INSTALL_ENABLED || vars.NVIDIA_INSTALL_ENABLED || '0' }}")"
          
          IS_NVIDIA_ENABLED=false
          if [ "$ENABLED_INPUT" = "1" ] || [ "$ENABLED_INPUT" = "true" ]; then
            IS_NVIDIA_ENABLED=true
          fi
          
          NVIDIA_DRIVER_URL="0"
          if [ "$IS_NVIDIA_ENABLED" = "true" ]; then
            VERSION_OVERRIDE="${{ github.event.inputs.NVIDIA_DRIVER_VERSION_OVERRIDE || vars.NVIDIA_DRIVER_VERSION_OVERRIDE || '0' }}"
            ARCH="${{ github.event.inputs.NVIDIA_DRIVER_ARCHITECTURE || vars.NVIDIA_DRIVER_ARCHITECTURE || 'x86_64' }}"
            echo "NVIDIA Install is ENABLED (Arch: $ARCH)."

            if [ -n "$VERSION_OVERRIDE" ] && [ "$VERSION_OVERRIDE" != "0" ]; then
              echo "  Mode: Using specific NVIDIA version override: $VERSION_OVERRIDE"
            else
              echo "  Mode: Detecting latest 'production branch' NVIDIA version."
            fi
            
            RELEASES_JSON=$(curl -sL "https://docs.nvidia.com/datacenter/tesla/drivers/releases.json")
            if [ -z "$RELEASES_JSON" ]; then
              echo "‚ùå ERROR: Failed to download NVIDIA release data."
              exit 1
            fi
            
            if [ -n "$VERSION_OVERRIDE" ] && [ "$VERSION_OVERRIDE" != "0" ]; then
              DRIVER_URL=$(echo "$RELEASES_JSON" | jq -r --arg ver "$VERSION_OVERRIDE" --arg arch "$ARCH" '.[] | .driver_info[] | select(.release_version == $ver) | .runfile_url[$arch]' | head -n1)
            else
              LATEST_INFO=$(echo "$RELEASES_JSON" | jq 'first(.[] | select(.type == "production branch")) | .driver_info[0]')
              DRIVER_URL=$(echo "$LATEST_INFO" | jq -r --arg arch "$ARCH" '.runfile_url[$arch]')
            fi

            if [ -z "$DRIVER_URL" ] || [ "$DRIVER_URL" = "null" ]; then
              echo "‚ùå ERROR: Could not determine a valid NVIDIA driver URL for the specified version/arch."
              exit 1
            else
              NVIDIA_DRIVER_URL="$DRIVER_URL"
              echo "‚úÖ Success! NVIDIA Driver URL found: $NVIDIA_DRIVER_URL"
            fi
          else
            echo "NVIDIA Install is DISABLED."
          fi

          echo "## 4. Final Build Configuration ##"
          echo "SLURM_VERSION=${TARGET_SLURM_VERSION}" >> $GITHUB_OUTPUT
          echo "NVIDIA_INSTALL_ENABLED=${IS_NVIDIA_ENABLED}" >> $GITHUB_OUTPUT
          echo "NVIDIA_DRIVER_URL=${NVIDIA_DRIVER_URL}" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
          
      - name: üê≥ Build Docker Image
        run: |
          docker build \
            --build-arg SLURM_VERSION=${{ steps.config.outputs.SLURM_VERSION }} \
            --build-arg NVIDIA_DRIVER_URL=${{ steps.config.outputs.NVIDIA_DRIVER_URL }} \
            -t ${{ secrets.DOCKER_HUB_REPO }}:$TAG_NAME .

      - name: üöÄ Login to DockerHub
        if: github.event_name == 'push'
        run: |
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USER }}" --password-stdin

      - name: üöÄ Push Image to DockerHub
        if: github.event_name == 'push'
        run: |
          docker push ${{ secrets.DOCKER_HUB_REPO }}:$TAG_NAME
