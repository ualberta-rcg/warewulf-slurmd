name: Build & Push Slurmd Warewulf Image

on:
  push:
    branches:
      - latest
  workflow_dispatch:
    inputs:
      SLURM_VERSION_OVERRIDE:
        description: 'Specific Slurm version (e.g., 24-11-5-1). Use "0" for latest.'
        required: false
        default: '0'
      NVIDIA_INSTALL_ENABLED:
        description: 'Enable NVIDIA driver installation (1=Yes, 0=No).'
        required: true
        type: choice
        options:
          - '1'
          - '0'
        default: '1'
      NVIDIA_DRIVER_VERSION_OVERRIDE:
        description: 'Specific NVIDIA driver version (e.g., 550.90.07). Use "0" for latest.'
        required: false
        default: '0'
      NVIDIA_DRIVER_ARCHITECTURE:
        description: 'NVIDIA driver architecture (x86_64 or aarch64).'
        required: true
        type: choice
        options:
          - 'x86_64'
          - 'aarch64'
        default: 'x86_64'

env:
  TAG_NAME: ${{ github.ref_name }}

jobs:
  build-and-push:
    name: Build & Push SlurmD WareWulf Image
    runs-on: ubuntu-24.04

    steps:
      - name: üõ†Ô∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üîß Configure Build & Verify Dependencies
        id: config
        env:
          # --- Pass ALL potential inputs and variables into the script's environment ---
          INPUT_SLURM_VERSION: ${{ github.event.inputs.SLURM_VERSION_OVERRIDE }}
          VAR_SLURM_VERSION: ${{ vars.SLURM_VERSION_OVERRIDE }}

          INPUT_NVIDIA_ENABLED: ${{ github.event.inputs.NVIDIA_INSTALL_ENABLED }}
          VAR_NVIDIA_ENABLED: ${{ vars.NVIDIA_INSTALL_ENABLED }}

          INPUT_NVIDIA_VERSION: ${{ github.event.inputs.NVIDIA_DRIVER_VERSION_OVERRIDE }}
          VAR_NVIDIA_VERSION: ${{ vars.NVIDIA_DRIVER_VERSION_OVERRIDE }}

          INPUT_NVIDIA_ARCH: ${{ github.event.inputs.NVIDIA_DRIVER_ARCHITECTURE }}
          VAR_NVIDIA_ARCH: ${{ vars.NVIDIA_DRIVER_ARCHITECTURE }}
        run: |
          set -e # Exit on any error
          
          # --- DEBUGGING: See the raw values the script receives ---
          echo "--- Debugging Raw Input/Variable Values ---"
          echo "INPUT_SLURM_VERSION: '$INPUT_SLURM_VERSION'"
          echo "VAR_SLURM_VERSION:   '$VAR_SLURM_VERSION'"
          echo "INPUT_NVIDIA_ENABLED: '$INPUT_NVIDIA_ENABLED'"
          echo "VAR_NVIDIA_ENABLED:   '$VAR_NVIDIA_ENABLED'"
          echo "INPUT_NVIDIA_VERSION: '$INPUT_NVIDIA_VERSION'"
          echo "VAR_NVIDIA_VERSION:   '$VAR_NVIDIA_VERSION'"
          echo "INPUT_NVIDIA_ARCH:    '$INPUT_NVIDIA_ARCH'"
          echo "VAR_NVIDIA_ARCH:      '$VAR_NVIDIA_ARCH'"
          echo "-------------------------------------------"

          lower() { echo "$1" | tr '[:upper:]' '[:lower:]'; }

          echo "## 1. Normalizing Standard Options ##"
          val="$(lower "${{ vars.DISABLE_AUTOLOGIN }}")"; [ "$val" = "1" ] || [ "$val" = "true" ] && echo "DISABLE_AUTOLOGIN=true" >> $GITHUB_OUTPUT || echo "DISABLE_AUTOLOGIN=false" >> $GITHUB_OUTPUT
          val="${{ vars.KERNEL_VERSION_OVERRIDE }}"; [ "$val" != "0" ] && [ -n "$val" ] && echo "KERNEL_VERSION=$val" >> $GITHUB_OUTPUT || echo "KERNEL_VERSION=latest" >> $GITHUB_OUTPUT

          # ---
          echo -e "\n## 2. Processing Slurm Configuration & Verifying DEBs ##"
          SLURM_VERSION_OVERRIDE="0";
          if [ -n "$INPUT_SLURM_VERSION" ] && [ "$INPUT_SLURM_VERSION" != "0" ]; then SLURM_VERSION_OVERRIDE="$INPUT_SLURM_VERSION";
          elif [ -n "$VAR_SLURM_VERSION" ] && [ "$VAR_SLURM_VERSION" != "0" ]; then SLURM_VERSION_OVERRIDE="$VAR_SLURM_VERSION"; fi
          echo "Effective SLURM_VERSION_OVERRIDE is: '$SLURM_VERSION_OVERRIDE'"

          if [ "$SLURM_VERSION_OVERRIDE" != "0" ]; then
            TARGET_SLURM_VERSION="$SLURM_VERSION_OVERRIDE"
          else
            echo "üîç No valid override. Detecting latest stable version..."
            LATEST_TAG=$(curl -s https://api.github.com/repos/SchedMD/slurm/tags | jq -r '.[].name' | grep -E '^slurm-[0-9]+-[0-9]+-[0-9]+-[0-9]+$' | sort -V | tail -n1)
            [ -z "$LATEST_TAG" ] && { echo "‚ùå ERROR: Could not determine latest Slurm tag."; exit 1; }
            TARGET_SLURM_VERSION="${LATEST_TAG#slurm-}"
          fi
          echo "üéØ Target Slurm Version: $TARGET_SLURM_VERSION"
          debver="$(echo "$TARGET_SLURM_VERSION" | sed 's/^\([0-9]*\)-\([0-9]*\)-\([0-9]*\)-\([0-9]*\)$/\1.\2.\3-\4/')"
          count=$(find "$GITHUB_WORKSPACE/slurm-debs" -type f -name "*_${debver}_*_u2404.deb" 2>/dev/null | wc -l)
          [ "$count" -eq 0 ] && { echo "‚ùå ERROR: Slurm DEB packages for version $TARGET_SLURM_VERSION not found!"; exit 1; }
          echo "‚úÖ Found $count matching DEB packages."

          # ---
          echo -e "\n## 3. Processing NVIDIA Configuration ##"
          # Determine if NVIDIA is enabled
          IS_NVIDIA_ENABLED=false
          if [ -n "$INPUT_NVIDIA_ENABLED" ]; then ENABLED_VAL="$INPUT_NVIDIA_ENABLED";
          elif [ -n "$VAR_NVIDIA_ENABLED" ]; then ENABLED_VAL="$VAR_NVIDIA_ENABLED"; else ENABLED_VAL="0"; fi
          if [ "$(lower "$ENABLED_VAL")" = "1" ] || [ "$(lower "$ENABLED_VAL")" = "true" ]; then IS_NVIDIA_ENABLED=true; fi
          
          NVIDIA_DRIVER_URL="0"
          if [ "$IS_NVIDIA_ENABLED" = "true" ]; then
            echo "NVIDIA Install is ENABLED."
            # Determine Version
            NVIDIA_VERSION_OVERRIDE="0"
            if [ -n "$INPUT_NVIDIA_VERSION" ] && [ "$INPUT_NVIDIA_VERSION" != "0" ]; then NVIDIA_VERSION_OVERRIDE="$INPUT_NVIDIA_VERSION";
            elif [ -n "$VAR_NVIDIA_VERSION" ] && [ "$VAR_NVIDIA_VERSION" != "0" ]; then NVIDIA_VERSION_OVERRIDE="$VAR_NVIDIA_VERSION"; fi
            # Determine Arch
            if [ -n "$INPUT_NVIDIA_ARCH" ]; then ARCH="$INPUT_NVIDIA_ARCH";
            elif [ -n "$VAR_NVIDIA_ARCH" ]; then ARCH="$VAR_NVIDIA_ARCH"; else ARCH="x86_64"; fi
            echo "Effective NVIDIA_VERSION_OVERRIDE: '$NVIDIA_VERSION_OVERRIDE', Arch: '$ARCH'"

            RELEASES_JSON=$(curl -sL "https://docs.nvidia.com/datacenter/tesla/drivers/releases.json")
            [ -z "$RELEASES_JSON" ] && { echo "‚ùå ERROR: Failed to download NVIDIA release data."; exit 1; }
            
            if [ "$NVIDIA_VERSION_OVERRIDE" != "0" ]; then
              DRIVER_URL=$(echo "$RELEASES_JSON" | jq -r --arg ver "$NVIDIA_VERSION_OVERRIDE" --arg arch "$ARCH" '.[] | .driver_info[] | select(.release_version == $ver) | .runfile_url[$arch]' | head -n1)
            else
              DRIVER_URL=$(echo "$RELEASES_JSON" | jq -r --arg arch "$ARCH" 'first(.[] | select(.type == "production branch")) | .driver_info[0].runfile_url[$arch]')
            fi

            [ -z "$DRIVER_URL" ] || [ "$DRIVER_URL" = "null" ] && { echo "‚ùå ERROR: Could not determine a valid NVIDIA driver URL."; exit 1; }
            NVIDIA_DRIVER_URL="$DRIVER_URL"
            echo "‚úÖ Success! NVIDIA Driver URL found: $NVIDIA_DRIVER_URL"
          else
            echo "NVIDIA Install is DISABLED."
          fi

          echo -e "\n## 4. Final Build Configuration ##"
          echo "SLURM_VERSION=${TARGET_SLURM_VERSION}" >> $GITHUB_OUTPUT
          echo "NVIDIA_INSTALL_ENABLED=${IS_NVIDIA_ENABLED}" >> $GITHUB_OUTPUT
          echo "NVIDIA_DRIVER_URL=${NVIDIA_DRIVER_URL}" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
          
      - name: üê≥ Build Docker Image
        run: |
          docker build \
            --build-arg SLURM_VERSION=${{ steps.config.outputs.SLURM_VERSION }} \
            --build-arg NVIDIA_DRIVER_URL=${{ steps.config.outputs.NVIDIA_DRIVER_URL }} \
            -t ${{ secrets.DOCKER_HUB_REPO }}:$TAG_NAME .

      - name: üöÄ Login to DockerHub
        if: github.event_name == 'push'
        run: |
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USER }}" --password-stdin

      - name: üöÄ Push Image to DockerHub
        if: github.event_name == 'push'
        run: |
          docker push ${{ secrets.DOCKER_HUB_REPO }}:$TAG_NAME
